# Generated by Django 3.0 on 2020-02-16 05:07

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('idteacher', models.IntegerField(primary_key=True, serialize=False)),
                ('subject', models.CharField(max_length=45)),
                ('type', models.CharField(max_length=45)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
            ],
            options={
                'db_table': 'batch',
            },
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('idnotifications', models.IntegerField(primary_key=True, serialize=False)),
                ('notifications', models.CharField(max_length=45)),
                ('dates', models.DateField()),
            ],
            options={
                'db_table': 'notifications',
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('idstaff', models.IntegerField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=45)),
                ('amount', models.IntegerField()),
            ],
            options={
                'db_table': 'staff',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('idstudent', models.AutoField(primary_key=True, serialize=False)),
                ('subject1', models.CharField(max_length=45)),
                ('subject2', models.CharField(max_length=45)),
                ('subject3', models.CharField(max_length=45)),
                ('type', models.CharField(max_length=45)),
                ('first_name', models.CharField(max_length=45)),
                ('last_name', models.CharField(max_length=45)),
                ('email', models.CharField(max_length=45)),
                ('contact', models.CharField(max_length=45)),
                ('dob', models.DateField()),
                ('username', models.CharField(max_length=45, unique=True)),
            ],
            options={
                'db_table': 'student',
            },
        ),
        migrations.CreateModel(
            name='StudentAttendence',
            fields=[
                ('idstudent', models.IntegerField(primary_key=True, serialize=False)),
                ('dates', models.DateField()),
                ('is_present', models.IntegerField()),
                ('is_reject', models.IntegerField()),
            ],
            options={
                'db_table': 'student_attendence',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('idteacher', models.AutoField(primary_key=True, serialize=False)),
                ('subject', models.CharField(max_length=45)),
                ('first_name', models.CharField(max_length=256)),
                ('last_name', models.CharField(max_length=45)),
                ('dob', models.DateField()),
                ('contact', models.CharField(max_length=45)),
                ('email', models.CharField(max_length=45)),
                ('username', models.CharField(max_length=45, unique=True)),
            ],
            options={
                'db_table': 'teacher',
            },
        ),
        migrations.CreateModel(
            name='TeacherNotification',
            fields=[
                ('idnotifications', models.AutoField(primary_key=True, serialize=False)),
                ('idteacher', models.IntegerField(blank=True, null=True, unique=True)),
                ('is_seen', models.IntegerField()),
                ('notify', models.CharField(max_length=256)),
                ('ndate', models.DateTimeField()),
            ],
            options={
                'db_table': 'teacher_notification',
            },
        ),
        migrations.CreateModel(
            name='TeacherAttendence',
            fields=[
                ('idteacher', models.IntegerField(primary_key=True, serialize=False)),
                ('dates', models.DateField()),
                ('is_present', models.IntegerField()),
            ],
            options={
                'db_table': 'teacher_attendence',
                'unique_together': {('idteacher', 'dates')},
            },
        ),
        migrations.CreateModel(
            name='Teachdent',
            fields=[
                ('idteacher', models.IntegerField(primary_key=True, serialize=False)),
                ('idstudent', models.IntegerField()),
            ],
            options={
                'db_table': 'teachdent',
                'unique_together': {('idteacher', 'idstudent')},
            },
        ),
        migrations.CreateModel(
            name='StudentNotification',
            fields=[
                ('idnotification', models.IntegerField(primary_key=True, serialize=False)),
                ('idstudent', models.IntegerField()),
                ('is_seen', models.IntegerField()),
            ],
            options={
                'db_table': 'student_notification',
                'unique_together': {('idnotification', 'idstudent')},
            },
        ),
        migrations.CreateModel(
            name='StudentBatch',
            fields=[
                ('batchid', models.IntegerField(primary_key=True, serialize=False)),
                ('studentid', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'student_batch',
                'unique_together': {('batchid', 'studentid')},
            },
        ),
        migrations.CreateModel(
            name='Salary',
            fields=[
                ('idsalary', models.AutoField(primary_key=True, serialize=False)),
                ('iduser', models.IntegerField()),
                ('amount', models.IntegerField()),
                ('dates', models.DateField()),
                ('month', models.CharField(max_length=45)),
                ('year', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'salary',
                'unique_together': {('idsalary', 'iduser')},
            },
        ),
        migrations.CreateModel(
            name='Fees',
            fields=[
                ('idfees', models.AutoField(primary_key=True, serialize=False)),
                ('idstudent', models.IntegerField()),
                ('amount', models.IntegerField()),
                ('month', models.CharField(max_length=45)),
                ('year', models.CharField(max_length=45)),
                ('dates', models.DateField()),
            ],
            options={
                'db_table': 'fees',
                'unique_together': {('idfees', 'idstudent')},
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('idassignment', models.IntegerField(primary_key=True, serialize=False)),
                ('idbatch', models.IntegerField()),
                ('topic', models.CharField(max_length=45)),
                ('subject', models.CharField(max_length=45)),
                ('issuedate', models.DateField()),
                ('duedate', models.DateField()),
            ],
            options={
                'db_table': 'assignment',
                'unique_together': {('idassignment', 'idbatch')},
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
